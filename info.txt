Core components:

grid no existe en react native, solamente flexbox

Dentro de react native, podemos encontrar los más comunes como:

<View></View> => equivalente a un contenedor o div, solo se puede tener un contenedor

<Text></Text> => texto ya sea como span, h1, etc 

<Image></Image> => imagenes 

<Button></Button> => boton (nos permite añadir alguna función) su tamaño y su dimensión no son modificables, toma el
tamaño de su contenedor tanto en android como ios 

//Aqui es donde van todos los estilos 

const styles = StyleSheet.create({
  container: {

    flex: 1,
    backgroundColor: '#fff',
    
  },
  inputContainer: {

    marginTop: 50,
    marginHorizontal: 20

  },
  input:{

    borderBottomColor: '#626893',
    borderBottomWidth: 1,
    height: 40,
    color: '#212121'

  }
});

//El button tiene varias propiedades 

<Button title='Add' color='#626893'/> => el title es el nombre que se le asigna al boton, tambien puedo asignarle un color

//TextInput tiene varias propiedades 

autoComplete='off' => sacar autocompletado
autoCorrect='false' => sacar autocorrector
autoCapitalize='none' => para cuando escribamos la primera letra no sea en mayuscula



Clase eventos y lista optimizada:

onChangeText{(text) => setTask(text)} => retorna como un callback el valor que yo he escrito dentro del campo, en este caso el TextInput,
tengo que setear el valor de lo que yo he escrito en el campo 

//o directamente puedo escribir un metodo que setee ese valor, como lo es: 

const onHandlerChange = (text) => {

  setTask(text)

}

//cuando clickeemos en el boton de añadir se guarde en un estado 

const [tasks, setTasks] = useState([]); => aqui es donde guardamos nuestra lista de tareas y el estado lo inicializamos 
con un arreglo vacio porque no va a tener ninguna tarea previa 

El boton tiene un evento que se llama onPress que se ejecuta cada vez que nosotros presionamos el boton 

nos creamos un metodo que se llame onHandlerSubmit que se ejecutara al momento que yo presione el boton:

const onHandlerSubmit = () => {

  setTasks([ //este metodo lo que hara es guardar las tareas, seteamos la lista de tareas 

    ...tasks, //hacemos una copia de las tareas anteriores con el spread 

    { //mis tareas serán un arreglo de objetos 

      id: Math.random().toString(), //tendra un id que va a ser un número aleatorio y le pongo toString para que me lo convierta en tipo cadena 
      value: task //el valor de las tareas va a ser el valor de mi estado (task)
    }
  ]);

  setTask(''); //y una vez clickemos debemos vaciar las tareas porque tenemos que crear una nueva 

}

En el boton nosotros tendremos una validación:

<Button disabled={!task} title='Add' color='#626893' onPress={onHandlerSubmit}/> => el boton va a estar deshabilitado 
cuando no exista el estado y lo ponemos asi: !task 

//Renderizar o mostrar la lista de tareas utilizando FlatList (podemos utilizarlo para listas basicas - listas planas)

El componente de FlatList tiene dos propiedades que son requeridas y obligatorias 

1) Los datos que va a mostrar, es decir los datos que va a renderizar (data)

2) Render item es el componente que va a renderizar la lista en si (renderItem)

3) El valor adiccional es el key extractor, es decir el identificador para cada uno de los elementos de la lista (keyExtractor)

//el renderItem destructura cada uno de los elementos de la lista, lo creamos como un componente a parte para ahorrar código
const renderItem = ({item}) => (

    <TouchableOpacity style={styles.itemContainer} onPress={() => onHandlerModal(item)}>
      <Text style={styles.itemList} key={item.id}>{item.value}</Text> => sacamos la key porque eso lo pondremos en el keyExtractor
    </TouchableOpacity>

  )

const keyExtractor = (item) => item.id; => recibe el item y seteamos el id de nuestra lista 


<FlatList data={tasks} renderItem={renderItem} keyExtractor={keyExtractor} style={styles.listContainer}/>

//Trabajamos con el modal de react native 


const [isModalVisible, setModalVisible] = useState(false); => tenemos que tener una caracteristica que me permita decir 
que el estado va a ser visible o no y por defecto el estado es falso porque por default no se va a mostrar, solo se vera 
si interactuamos con algún elemento en particular 

//necesitamos saber los datos del elemento que yo presione 

const [selectedTask, setSelectedTask] = useState(null); => añadimos un estado de seleccion de datos y por default la tarea 
no va a estar seleccionada, la tarea por defecto va a estar vacia hasta que yo lo presione 


tiene que ser presionable asi pueda interactuar con el elemento 

<TouchableOpacity style={styles.itemContainer} onPress={() => onHandlerModal(item)}> => le pasamos todo el item para setearlo como seleccion 
    <Text style={styles.itemList}>{item.value}</Text>
</TouchableOpacity>

const onHandlerModal = (item) => { => el item lo recibimos del onHandlerModal de renderItem
    
  setModalVisible(!isModalVisible); => invertimos para que sea true y se muestre el modal 
  setSelectedTask(item); => lo seteamos como la tarea seleccionada 

}

El modal tiene una propiedad que se llama visible que me va a demostrar si el modal se muestra o no y con animationType 
podemos elegir que animación queremos que tenga 

<Text style={styles.selectedTask}>{selectedTask?.value}</Text> => le pasamos el optionalChanging para que no de error 


//onHandleCancel

const onHandleCancel = () => {

  setModalVisible(!isModalVisible); => debemos invertir el estado del modal 
  setSelectedTask(null); //vaciamos la seleccion y lo ponemos en null

}

//onHandlerDelete

const onHandleDelete = () => {

  //seteamos nuestra lista de tareas, recibimos la lista previa y por esa lista vamos a filtrar cada una de las tareas por 
  el id, queremos que nos retorne los valores diferentes al elemento seleccionado (eliminado) 
  setTasks((prevTaskList) => prevTaskList.filter((task) => task.id !== selectedTask.id));
  setModalVisible(!isModalVisible); //ocultamos el modal cuando se elimine la tarea 

}




Clase Debug y Split Components:

//Como debuggear 

Leer bien el mensaje de error 
Utilizar console.log de traza de flujo para utilizar la consola 
Chrome debugger y breakpoints 





